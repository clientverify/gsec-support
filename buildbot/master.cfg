# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("beef3-slave", "cliver")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git@git.cs.unc.edu:cliver/klee.git',
        workdir='gitpoller-workdir', branches=['openssl-llvm34','hmm'],
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming
# changes.  For example, we might kick off both debug and release
# builds based on an incoming commit on openssl-llvm34.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="main",
                            change_filter=filter.ChangeFilter(branch='openssl-llvm34'),
                            treeStableTimer=60,
                            builderNames=["debug", "release"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="hmm",
                            change_filter=filter.ChangeFilter(branch='hmm'),
                            treeStableTimer=60,
                            builderNames=["hmm"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["debug", "release", "hmm"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot import locks

build_lock = locks.SlaveLock("slave_builds", maxCount = 1)

def get_cliver_build_factory(debug_mode=False, branch="master"):
    f = BuildFactory()
    # cleanup
    f.addStep(ShellCommand(command=["rm", "-rf", "build", "gsec-support", "local", "src"],
                                 workdir="."))
    # check out the source
    f.addStep(ShellCommand(command=["git", "clone", "--branch", branch,
                                    'git@git.cs.unc.edu:cliver/gsec-support.git'],
                           workdir="."))
    # run the cliver automated download/build/install by RAC
    cliver_cmdline = ["gsec-support/update.sh", "-i"]
    if debug_mode:
        cliver_cmdline.append("-d")
    f.addStep(ShellCommand(command=cliver_cmdline, timeout=3600, workdir="."))
    return f

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="debug",
      slavenames=["beef3-slave"],
      factory=get_cliver_build_factory(debug_mode=True),
      locks=[build_lock.access('counting')]))
c['builders'].append(
    BuilderConfig(name="release",
      slavenames=["beef3-slave"],
      factory=get_cliver_build_factory(debug_mode=False),
      locks=[build_lock.access('counting')]))
c['builders'].append(
    BuilderConfig(name="hmm",
      slavenames=["beef3-slave"],
      factory=get_cliver_build_factory(debug_mode=False, branch="kleehmm"),
      locks=[build_lock.access('counting')]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("cliver","cliver")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Cliver"
c['titleURL'] = "http://cs.unc.edu/~rac/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
