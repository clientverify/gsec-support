# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("thew-slave", "cliver")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git@git.cs.unc.edu:cliver/klee.git',
        workdir='gitpoller-klee',
        project='klee', branches=['openssl-llvm34','hmm','parallel'],
        pollinterval=300))
c['change_source'].append(GitPoller(
        'git@git.cs.unc.edu:cliver/gsec-support.git',
        workdir='gitpoller-gsec-support',
        project='gsec-support', branches=['master','kleehmm','kleeparallel'],
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming
# changes.  For example, we might kick off both debug and release
# builds based on an incoming commit on openssl-llvm34.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="main",
                            change_filter=filter.ChangeFilter(
                               project='klee', branch='openssl-llvm34'),
                            treeStableTimer=60,
                            builderNames=["release", "debug"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="gsec-support-master",
                            change_filter=filter.ChangeFilter(
                               project='gsec-support', branch='master'),
                            treeStableTimer=60,
                            builderNames=["release", "debug"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="hmm",
                            change_filter=filter.ChangeFilter(
                               project='klee', branch='hmm'),
                            treeStableTimer=60,
                            builderNames=["hmm"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="gsec-support-hmm",
                            change_filter=filter.ChangeFilter(
                               project='gsec-support', branch='kleehmm'),
                            treeStableTimer=60,
                            builderNames=["hmm"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="parallel",
                            change_filter=filter.ChangeFilter(
                               project='klee', branch='parallel'),
                            treeStableTimer=60,
                            builderNames=["parallel"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="gsec-support-parallel",
                            change_filter=filter.ChangeFilter(
                               project='gsec-support', branch='kleeparallel'),
                            treeStableTimer=60,
                            builderNames=["parallel"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["release", "debug", "hmm", "parallel"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot import locks

build_lock = locks.SlaveLock("slave_builds", maxCount = 3)

def get_cliver_build_factory(debug_mode=False, branch="master"):
    f = BuildFactory()
    # cleanup
    f.addStep(ShellCommand(command=["rm", "-rf", "gsec-support"],
                           workdir=".",
                           description="cleaning",
                           descriptionDone="cleanup",
                           locks=[build_lock.access('counting')],
                           haltOnFailure=True))
    # check out the source
    f.addStep(ShellCommand(command=["git", "clone", "--branch", branch,
                                    'git@git.cs.unc.edu:cliver/gsec-support.git'],
                           workdir=".",
                           description="git-cloning",
                           descriptionDone="git-clone",
                           locks=[build_lock.access('counting')],
                           haltOnFailure=True))
    # save snapshot of previous build and delete it
    f.addStep(ShellCommand(command=["gsec-support/snapshot-clean.sh"],
                           workdir=".",
                           description="snapshotting",
                           descriptionDone="snapshot",
                           locks=[build_lock.access('counting')],
                           haltOnFailure=True))
    # run the cliver automated download/build/install by RAC
    cliver_cmdline = ["nice", "gsec-support/update.sh", "-i"]
    if debug_mode:
        cliver_cmdline.append("-d")
    f.addStep(ShellCommand(command=cliver_cmdline, timeout=3600, workdir=".",
                           description="compiling",
                           descriptionDone="compile",
                           locks=[build_lock.access('counting')],
                           haltOnFailure=True))
    # run the cliver experiments
    expt_cmdline = ["gsec-support/experiments.sh", "-c",
                    "gsec-support/buildbot/experiments_config"]
    f.addStep(ShellCommand(command=expt_cmdline, timeout=None, workdir=".",
                           description="experimenting",
                           descriptionDone="experiments",
                           locks=[build_lock.access('exclusive')],
                           haltOnFailure=True))
    return f

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="debug",
      slavenames=["thew-slave"],
      factory=get_cliver_build_factory(debug_mode=True)))
c['builders'].append(
    BuilderConfig(name="release",
      slavenames=["thew-slave"],
      factory=get_cliver_build_factory(debug_mode=False)))
c['builders'].append(
    BuilderConfig(name="hmm",
      slavenames=["thew-slave"],
      factory=get_cliver_build_factory(debug_mode=False, branch="kleehmm")))
c['builders'].append(
    BuilderConfig(name="parallel",
      slavenames=["thew-slave"],
      factory=get_cliver_build_factory(debug_mode=False, branch="kleeparallel")))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("cliver","$parKLEE")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
    view = 'auth',
    pauseSlave = 'auth'
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# Fancy mail notifier
from buildbot.status.builder import Results
import cgi, datetime

def html_message_formatter(mode, name, build, results, master_status):
    """Provide a customized message to Buildbot's MailNotifier.

    The last 80 lines of the log are provided as well as the changes
    relevant to the build.  Message content is formatted as html.
    """
    result = Results[results]

    limit_lines = 80
    text = list()
    text.append(u'<h4>Build status: %s</h4>' % result.upper())
    text.append(u'<table cellspacing="10"><tr>')
    text.append(u"<td>Buildslave for this Build:</td><td><b>%s</b></td></tr>" % build.getSlavename())
    if master_status.getURLForThing(build):
        text.append(u'<tr><td>Complete logs for all build steps:</td><td><a href="%s">%s</a></td></tr>'
                    % (master_status.getURLForThing(build),
                       master_status.getURLForThing(build))
                    )
        text.append(u'<tr><td>Build Reason:</td><td>%s</td></tr>' % build.getReason())
        source = u""
        for ss in build.getSourceStamps():
            if ss.codebase:
                source += u'%s: ' % ss.codebase
            if ss.branch:
                source += u"[branch %s] " % ss.branch
            if ss.revision:
                source +=  ss.revision
            else:
                source += u"HEAD"
            if ss.patch:
                source += u" (plus patch)"
            if ss.patch_info: # add patch comment
                source += u" (%s)" % ss.patch_info[1]
        text.append(u"<tr><td>Build Source Stamp:</td><td><b>%s</b></td></tr>" % source)
        text.append(u"<tr><td>Blamelist:</td><td>%s</td></tr>" % ",".join(build.getResponsibleUsers()))
        text.append(u'</table>')
        if ss.changes:
            text.append(u'<h4>Recent Changes:</h4>')
            for c in ss.changes:
                cd = c.asDict()
                when = datetime.datetime.fromtimestamp(cd['when'] ).ctime()
                text.append(u'<table cellspacing="10">')
                text.append(u'<tr><td>Repository:</td><td>%s</td></tr>' % cd['repository'] )
                text.append(u'<tr><td>Project:</td><td>%s</td></tr>' % cd['project'] )
                text.append(u'<tr><td>Time:</td><td>%s</td></tr>' % when)
                text.append(u'<tr><td>Changed by:</td><td>%s</td></tr>' % cd['who'] )
                text.append(u'<tr><td>Comments:</td><td>%s</td></tr>' % cd['comments'] )
                text.append(u'</table>')
                files = cd['files']
                if files:
                    text.append(u'<table cellspacing="10"><tr><th align="left">Files</th></tr>')
                    for file in files:
                        text.append(u'<tr><td>%s:</td></tr>' % file['name'] )
                    text.append(u'</table>')
        text.append(u'<br>')
        # get all the steps in build in reversed order
        rev_steps = reversed(build.getSteps())
        # find the last step that finished
        for step in rev_steps:
            if step.isFinished():
                break
        # get logs for the last finished step
        if step.isFinished():
            logs = step.getLogs()
        # No step finished, loop just exhausted itself; so as a special case we fetch all logs
        else:
            logs = build.getLogs()
        # logs within a step are in reverse order. Search back until we find stdio
        for log in reversed(logs):
            if log.getName() == 'stdio':
                break
        name = "%s.%s" % (log.getStep().getName(), log.getName())
        status, dummy = log.getStep().getResults()
        content = log.getText().splitlines() # Note: can be VERY LARGE
        url = u'%s/steps/%s/logs/%s' % (master_status.getURLForThing(build),
                                       log.getStep().getName(),
                                       log.getName())

        text.append(u'<i>Detailed log of last build step:</i> <a href="%s">%s</a>'
                    % (url, url))
        text.append(u'<br>')
        text.append(u'<h4>Last %d lines of "%s"</h4>' % (limit_lines, name))
        unilist = list()
        for line in content[len(content)-limit_lines:]:
            unilist.append(cgi.escape(unicode(line,'utf-8')))
        text.append(u'<pre>')
        text.extend(unilist)
        text.append(u'</pre>')
        text.append(u'<br><br>')
        text.append(u'<b>-The Buildbot</b>')
        return {
            'body': u"\n".join(text),
            'type': 'html'
            }

mn = MailNotifier(fromaddr='noreply@cs.unc.edu',
                  sendToInterestedUsers=False,
                  extraRecipients=['achi@cs.unc.edu', 'rac@cs.unc.edu', 'nesfield@cs.unc.edu'],
                  messageFormatter=html_message_formatter)
c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Cliver"
c['titleURL'] = "http://cs.unc.edu/~nesfield/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://thew.cs.unc.edu:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
